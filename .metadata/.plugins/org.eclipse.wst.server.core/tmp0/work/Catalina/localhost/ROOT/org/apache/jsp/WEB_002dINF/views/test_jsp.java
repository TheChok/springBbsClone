/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.58
 * Generated at: 2023-09-26 19:06:36 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class test_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html;charset=UTF-8");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("<html>\r\n");
      out.write("<head>\r\n");
      out.write("    <title>Title</title>\r\n");
      out.write("    <script src=\"https://code.jquery.com/jquery-1.11.3.js\"></script>\r\n");
      out.write("</head>\r\n");
      out.write("<body>\r\n");
      out.write("    <h2>commentTest</h2>\r\n");
      out.write("    comment: <input type=\"text\" name=\"comment\"/>\r\n");
      out.write("    <br>\r\n");
      out.write("    <button id=\"sendBtn\" type=\"button\">SEND</button>\r\n");
      out.write("    <button id=\"modBtn\"  type=\"button\">수정</button>\r\n");
      out.write("    <div id=\"commentList\">\r\n");
      out.write("    </div>\r\n");
      out.write("    <div id=\"replyForm\" style=\"display: none\">\r\n");
      out.write("        <input 	type=\"text\" name=\"replyComment\"/>\r\n");
      out.write("        <button type=\"button\" id=\"wrtRepBtn\" >등록</button>\r\n");
      out.write("    </div>\r\n");
      out.write("\r\n");
      out.write("    <script>\r\n");
      out.write("        let bno = 2690; // 하드코딩 - 테스트용\r\n");
      out.write("        \r\n");
      out.write("        let showList = function (bno) {\r\n");
      out.write("            $.ajax({\r\n");
      out.write("                type	: 'GET',       			// 요청 메서드\r\n");
      out.write("                url		: '/comments?bno='+bno, // 요청 URI\r\n");
      out.write("                // dataType : 'json', 			// 전송받을 데이터의 타입 -> 'text'로도 적을 수 있다.\r\n");
      out.write("                // dataType을 생략하고 작성하면 default값 json으로 적용된다. 그래서 주석처리해서 생략한것.\r\n");
      out.write("                success : function(result){		// dataType이 json이면 결과값을 .parse 할 필요가 없다.\r\n");
      out.write("                    $(\"#commentList\").html(toHtml(result));\r\n");
      out.write("                },\r\n");
      out.write("                error   : function(){			// 에러가 발생했을 때, 호출될 함수\r\n");
      out.write("                	alert(\"error\") \r\n");
      out.write("                }	\r\n");
      out.write("            });\r\n");
      out.write("        }\r\n");
      out.write("		\r\n");
      out.write("        //-- $(document).ready(function(){ --//\r\n");
      out.write("        $(document).ready(function(){\r\n");
      out.write("        	showList(bno);\r\n");
      out.write("			\r\n");
      out.write("            // modBtn //\r\n");
      out.write("            $(\"#modBtn\").click(function(){\r\n");
      out.write("                let cno 	= $(this).attr(\"data-cno\");\r\n");
      out.write("                let comment = $(\"input[name=comment]\").val();\r\n");
      out.write("				\r\n");
      out.write("                if (comment.trim() == '') {\r\n");
      out.write("                    alert(\"댓글을 입력해주세요.\");\r\n");
      out.write("                    $(\"input[name=comment]\").focus();	\r\n");
      out.write("                    return;\r\n");
      out.write("                }\r\n");
      out.write("				\r\n");
      out.write("                $.ajax({\r\n");
      out.write("                    type	:'PATCH',       		// 요청 메서드\r\n");
      out.write("                    url		: '/comments/'+cno,  	// 요청 URI - /comments?bno=2029 POST <- 컨트롤러에 있는 url 참조해서.\r\n");
      out.write("                    headers : {						// 요청 헤더 \r\n");
      out.write("                    	\"content-type\": \"application/json\"\r\n");
      out.write("                    }, \r\n");
      out.write("                    data 	: JSON.stringify({		// 서버로 전송할 데이터. stringify()로 직렬화 필요.\r\n");
      out.write("                    	bno		: bno, \r\n");
      out.write("                    	comment	: comment\r\n");
      out.write("                    }),  \r\n");
      out.write("                    success : function(result){\r\n");
      out.write("                        alert(result);\r\n");
      out.write("                        showList(bno);\r\n");
      out.write("                    },\r\n");
      out.write("                    error   : function(){			// 에러가 발생했을 때, 호출될 함수 \r\n");
      out.write("                    	alert(\"error\")\r\n");
      out.write("                    }	\r\n");
      out.write("                });\r\n");
      out.write("            });	// End - modBtn\r\n");
      out.write("            \r\n");
      out.write("            \r\n");
      out.write("            // wrtRepBtn //\r\n");
      out.write("            $(\"#wrtRepBtn\").click(function(){\r\n");
      out.write("                let comment = $(\"input[name=replyComment]\").val();\r\n");
      out.write("                let pcno 	= $(\"#replyForm\").parent().attr(\"data-pcno\");\r\n");
      out.write("				\r\n");
      out.write("                if (comment.trim() == '') {\r\n");
      out.write("                    alert(\"댓글을 입력해주세요.\");\r\n");
      out.write("                    $(\"input[name=replyComment]\").focus();\r\n");
      out.write("                    return;\r\n");
      out.write("                }\r\n");
      out.write("				\r\n");
      out.write("                $.ajax({\r\n");
      out.write("                    type	:'POST',       			// 요청 메서드\r\n");
      out.write("                    url		: '/comments?bno='+bno,	// 요청 URI - /comments?bno=2029 POST <- 컨트롤러에 있는 url 참조해서.\r\n");
      out.write("                    headers : {						// 요청 헤더\r\n");
      out.write("                    	\"content-type\": \"application/json\"\r\n");
      out.write("                    }, \r\n");
      out.write("                    data 	: JSON.stringify({		// 서버로 전송할 데이터. stringify()로 직렬화 필요.\r\n");
      out.write("                    	pcno	: pcno,\r\n");
      out.write("                    	bno		: bno,\r\n");
      out.write("                    	comment	: comment\r\n");
      out.write("                    }),  \r\n");
      out.write("                    success : function(result){\r\n");
      out.write("                        alert(result);\r\n");
      out.write("                        showList(bno);\r\n");
      out.write("                    },\r\n");
      out.write("                    error   : function(){			// 에러가 발생했을 때, 호출될 함수\r\n");
      out.write("                    	alert(\"error\")\r\n");
      out.write("                    } \r\n");
      out.write("                });\r\n");
      out.write("				\r\n");
      out.write("                $(\"#replyForm\").css(\"display\", \"none\");\r\n");
      out.write("                $(\"input[name=replyComment]\").val('');\r\n");
      out.write("                $(\"#replyForm\").appendTo(\"body\");\r\n");
      out.write("            });	// End - wrtRepBtn\r\n");
      out.write("            \r\n");
      out.write("            \r\n");
      out.write("            // sendBtn //\r\n");
      out.write("            $(\"#sendBtn\").click(function(){\r\n");
      out.write("                let comment = $(\"input[name=comment]\").val();\r\n");
      out.write("				\r\n");
      out.write("                if (comment.trim() == '') {\r\n");
      out.write("                    alert(\"댓글을 입력해주세요.\");\r\n");
      out.write("                    $(\"input[name=comment]\").focus();\r\n");
      out.write("                    return;\r\n");
      out.write("                }\r\n");
      out.write("				\r\n");
      out.write("                $.ajax({\r\n");
      out.write("                    type	:'POST',       				// 요청 메서드\r\n");
      out.write("                    url		: '/comments?bno='+bno,  	// 요청 URI - /comments?bno=2029 POST <- 컨트롤러에 있는 url 참조해서.\r\n");
      out.write("                    headers : {							// 요청 헤더\r\n");
      out.write("                    	\"content-type\": \"application/json\"\r\n");
      out.write("                    }, \r\n");
      out.write("                    data 	: JSON.stringify({			// 서버로 전송할 데이터. stringify()로 직렬화 필요.\r\n");
      out.write("                    	bno		: bno, \r\n");
      out.write("                    	comment	: comment\r\n");
      out.write("                    }),  \r\n");
      out.write("                    success : function(result){\r\n");
      out.write("                        alert(result);\r\n");
      out.write("                        showList(bno);\r\n");
      out.write("                    },\r\n");
      out.write("                    error   : function(){				// 에러가 발생했을 때, 호출될 함수\r\n");
      out.write("                    	alert(\"error\") \r\n");
      out.write("                    } \r\n");
      out.write("                });\r\n");
      out.write("            });	// End - sendBtn\r\n");
      out.write("            \r\n");
      out.write("			\r\n");
      out.write("            // commentList 동적데이터 버튼 설정\r\n");
      out.write("            $(\"#commentList\").on(\"click\", \".modBtn\", function(){\r\n");
      out.write("                let cno 	= $(this).parent().attr(\"data-cno\");\r\n");
      out.write("                let comment = $(\"span.comment\", $(this).parent()).text();\r\n");
      out.write("				\r\n");
      out.write("                $(\"input[name=comment]\").val(comment);\r\n");
      out.write("                $(\"#modBtn\").attr(\"data-cno\", cno);\r\n");
      out.write("            });\r\n");
      out.write("			\r\n");
      out.write("            $(\"#commentList\").on(\"click\", \".replyBtn\", function(){\r\n");
      out.write("                // 1. replyForm을 옮기고\r\n");
      out.write("                $(\"#replyForm\").appendTo($(this).parent());\r\n");
      out.write("                \r\n");
      out.write("                // 2. 답글을 입력할 폼을 보여줌.\r\n");
      out.write("                $(\"#replyForm\").css(\"display\", \"block\");\r\n");
      out.write("            });\r\n");
      out.write("			\r\n");
      out.write("            // $(\".delBtn\").click(function(){ <- 요렇게 하면 인식 안 된다.\r\n");
      out.write("            $(\"#commentList\").on(\"click\", \".delBtn\", function(){    // <- 이렇게 해줘야 함.\r\n");
      out.write("                let cno = $(this).parent().attr(\"data-cno\");\r\n");
      out.write("                let bno = $(this).parent().attr(\"data-bno\");\r\n");
      out.write("				\r\n");
      out.write("                $.ajax({\r\n");
      out.write("                    type	:'DELETE',       					// 요청 메서드\r\n");
      out.write("                    url		: '/comments/'+cno+'?bno='+bno,  	// 요청 URI\r\n");
      out.write("                    success : function(result){\r\n");
      out.write("                        alert(result);\r\n");
      out.write("                        showList(bno);\r\n");
      out.write("                    },\r\n");
      out.write("                    error   : function(){ alert(\"error\") } 		// 에러가 발생했을 때, 호출될 함수\r\n");
      out.write("                });\r\n");
      out.write("            });\r\n");
      out.write("        });	//-- End of $(document).ready(function(){ --//\r\n");
      out.write("		\r\n");
      out.write("        \r\n");
      out.write("        //-- 호출메서드 작성 --//\r\n");
      out.write("        let toHtml = function (comments) {\r\n");
      out.write("            let tmp =	\"<ul>\";\r\n");
      out.write("			\r\n");
      out.write("            comments.forEach(function(comments) {\r\n");
      out.write("                tmp += 		'<li data-cno='+ comments.cno +' data-pcno='+ comments.pcno +' data-bno='+ comments.bno +'>'\r\n");
      out.write("                if (comments.cno!=comments.pcno) {\r\n");
      out.write("                    tmp += 		'&nbspㄴ'\r\n");
      out.write("					tmp += 		' commenter='+'<span class=\"commenter\">'+ comments.commenter +'</span>';\r\n");
      out.write("                }\r\n");
      out.write("                tmp +=     		' comment='+'<span class=\"comment\">'+ comments.comment +'</span>'\r\n");
      out.write("                tmp +=     		' up_date='+ comments.up_date\r\n");
      out.write("                tmp +=     		'<button class=\"delBtn\">삭제</button>'\r\n");
      out.write("                tmp +=     		'<button class=\"modBtn\">수정</button>'\r\n");
      out.write("                tmp +=     		'<button class=\"replyBtn\">답글</button>'\r\n");
      out.write("                tmp += 		'</li>'\r\n");
      out.write("            })\r\n");
      out.write("            return tmp+ \"</ul>\";\r\n");
      out.write("        };\r\n");
      out.write("    </script>\r\n");
      out.write("\r\n");
      out.write("</body>\r\n");
      out.write("</html>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
