package com.bbs.controller;

import java.util.HashMap;
import java.util.List;
import java.util.Map;

import javax.servlet.http.HttpServletRequest;
import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.servlet.mvc.support.RedirectAttributes;

import com.bbs.domain.BoardDto;
import com.bbs.domain.PageHandler;
import com.bbs.service.BoardService;

@Controller
@RequestMapping("/board")
public class BoardController {
	@Autowired
	BoardService boardService;
	
	
	// 글쓰기 화면 이동 //
	@GetMapping("/write")
	public String write(Model m) {
		m.addAttribute("mode", "new");
		return "board";
	}
	
	
	// 게시글 쓰기 //
	@PostMapping("/write")
	public String write(BoardDto boardDto, Model m, HttpSession session, RedirectAttributes rattr) {
		String writer = (String)session.getAttribute("id");
		boardDto.setWriter(writer);
		
		try {
			int rowCnt = boardService.write(boardDto);
			if(rowCnt != 1) throw new Exception("Write failed");
			
			rattr.addFlashAttribute("msg", "WRT_OK");
			
			return "redirect:/board/list";
			
		} catch (Exception e) {
			e.printStackTrace();
			
			// 작성했던 게시글로 돌아갈 때, 작성한 내용을 보여준다.
			m.addAttribute(boardDto);
			m.addAttribute("msg", "WRT_ERR");
			
			return "board";
		}
	}
	
	
	// 게시글 쓰기 //
	@PostMapping("/modify")
	public String modify(BoardDto boardDto, Model m, HttpSession session, RedirectAttributes rattr) {
		String writer = (String)session.getAttribute("id");
		boardDto.setWriter(writer);
		
		try {
			int rowCnt = boardService.modify(boardDto);
			if(rowCnt != 1) throw new Exception("Modify failed");
			
			rattr.addFlashAttribute("msg", "MOD_OK");
			
			return "redirect:/board/list";
			
		} catch (Exception e) {
			e.printStackTrace();
			
			// 작성했던 게시글로 돌아갈 때, 작성한 내용을 보여준다.
			m.addAttribute(boardDto);
			m.addAttribute("msg", "MOD_ERR");
			
			return "board";
		}
	}
	
	
	// 게시글 읽기 //
	@GetMapping("/read")
	public String read(Integer bno, Integer page, Integer pageSize, Model m) {
		try {
			BoardDto boardDto = boardService.read(bno);
			// m.addAttribute("boardDto", boardDto)
			m.addAttribute(boardDto);
		} catch (Exception e) {
			e.printStackTrace();
		}
		return "board";
	}
	
	
	// 게시글 삭제 //
	@PostMapping("/remove")
    public String remove(Integer bno, Integer page, Integer pageSize, Model m, HttpSession session, RedirectAttributes rattr) {
        String writer = (String)session.getAttribute("id");
        try {
            m.addAttribute("page", page);
            m.addAttribute("pageSize", pageSize);
            
            int rowCnt = boardService.remove(bno, writer);
            if (rowCnt != 1) {
                throw new Exception("board remove error");
            }
            // 메시지가 한 번만 나옴
            rattr.addFlashAttribute("msg", "DEL_OK");
        } catch (Exception e) {
            e.printStackTrace();
            // 메시지가 한 번만 나옴
            rattr.addFlashAttribute("msg", "DEL_ERR");
        }
        return "redirect:/board/list";
    }
	
	
	// list - 게시물 목록 //
	@GetMapping("/list")
	public String list(Integer page, Integer pageSize, Model m, HttpServletRequest request) {
		if(!loginCheck(request))	return "redirect:/login/login?toURL="+request.getRequestURL();  // 로그인을 안했으면 로그인 화면으로 이동
		if(page == null) 	 page 	  = 1;
		if(pageSize == null) pageSize = 10;
		
		try {
			
			int 		totalCnt 	= boardService.getCount();
			PageHandler pageHandler = new PageHandler(totalCnt, page, pageSize);
			
			
			Map map = new HashMap();
			map.put("offset", (page-1)*pageSize);
			map.put("pageSize", pageSize);
			
			List<BoardDto> list = boardService.getPage(map);
			m.addAttribute("list", list);
			m.addAttribute("ph", pageHandler);
			m.addAttribute("page", page);
			m.addAttribute("pageSize", pageSize);
			
		} catch(Exception e) {
			e.printStackTrace();
		}
		
		return "boardList"; // 로그인을 한 상태이면, 게시판 화면으로 이동
	}

	private boolean loginCheck(HttpServletRequest request) {
		// 1. 세션을 얻어서
		HttpSession session = request.getSession();
		// 2. 세션에 id가 있는지 확인, 있으면 true를 반환
		return session.getAttribute("id")!=null;
	}
}