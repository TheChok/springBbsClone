package com.bbs.controller;

import java.util.List;

import javax.servlet.http.HttpSession;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.http.HttpStatus;
import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.DeleteMapping;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PatchMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;
import org.springframework.web.bind.annotation.RequestBody;
import org.springframework.web.bind.annotation.RestController;

import com.bbs.domain.CommentDto;
import com.bbs.service.CommentService;

//@RestController - @ResponseBody + @Controller
//@RestController 대신 @Controller를 사용하면 ajax 통신을 하는 각 메서드마다 @ResponseBody를 붙여줘야 함.
@RestController
public class CommentController {
	@Autowired
	CommentService service;
	
	// 댓글 등록
	@PostMapping("/comments")   // /comments?bno=2029 POST
	public ResponseEntity<String> write(@RequestBody CommentDto dto, Integer bno, HttpSession session) {
		// ajax를 이용해서 웹브라우저 - 서버 간 통신을 할 때는 @RequestBody 태그를 파라미터 앞에 붙여줘야 함.
		// json 형식으로 데이터를 보낼 때는 header에 content-type, application/json 라고 작성해야 함.
		
		//String commenter = "asdf";
		String commenter = (String) session.getAttribute("id");
	    dto.setCommenter(commenter);
	    dto.setBno(bno);
	    
	    try {
	        if (service.write(dto) != 1)	throw new Exception("Write failed");
	        return new ResponseEntity<String>("WRT_OK", HttpStatus.OK);
	        
	    } catch (Exception e) {
	        e.printStackTrace();
	        return new ResponseEntity<String>("WRT_ERR", HttpStatus.BAD_REQUEST);
	    }
	}
	
	// 지정된 게시물의 모든 댓글 조회
	@GetMapping("/comments")	// /comment?bno=1080 GET
	public ResponseEntity<List<CommentDto>> list(Integer bno) {
		List<CommentDto> list = null;
	    
		try {
	        list = service.getList(bno);
	        return new ResponseEntity<List<CommentDto>>(list, HttpStatus.OK);   // 200
	    } catch (Exception e) {
	        e.printStackTrace();
	        return new ResponseEntity<List<CommentDto>>(HttpStatus.BAD_REQUEST); // 400
	    }
	}
	
	// 댓글 수정
	@PatchMapping("/comments/{cno}")   // /comments/26  PATCH
	public ResponseEntity<String> modify(@PathVariable Integer cno, @RequestBody CommentDto dto, HttpSession session) {
		//String commenter = "asdf";
		String commenter = (String)session.getAttribute("id");
		dto.setCommenter(commenter);
		dto.setCno(cno);
		System.out.println("dto = " + dto);
		
		try {
			if(service.modify(dto)!=1)	throw new Exception("Write failed.");
			return new ResponseEntity<>("MOD_OK", HttpStatus.OK);
			
		} catch (Exception e) {
			e.printStackTrace();
			return new ResponseEntity<String>("MOD_ERR", HttpStatus.BAD_REQUEST);
		}
	}
	
	// 지정된 댓글 삭제
	@DeleteMapping("/comments/{cno}")   // /comments/1?bno=2028 <- 삭제할 댓글 번호
	public ResponseEntity<String> remove(@PathVariable Integer cno, Integer bno, HttpSession session) {
		//String commenter = "asdf";
		String commenter = (String) session.getAttribute("id");
		
	    try {
	        System.out.println("cno, bno, commenter = " + cno + ", " + bno + ", " + commenter);
	        int rowCnt = service.remove(cno, bno, commenter);
	        if (rowCnt != 1)	throw new Exception("Delete Failed");
	        return new ResponseEntity<>("DEL_OK", HttpStatus.OK);
	        
	    } catch (Exception e) {
	        e.printStackTrace();
	        return new ResponseEntity<>("DEL_ERR", HttpStatus.BAD_REQUEST);
	    }
	}

}